// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package statefulString

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"internal"
)

type StatefulString struct {
	pulumi.CustomResourceState

	String   pulumi.StringOutput    `pulumi:"string"`
	Triggers pulumi.StringMapOutput `pulumi:"triggers"`
}

// NewStatefulString registers a new resource with the given unique name, arguments, and options.
func NewStatefulString(ctx *pulumi.Context,
	name string, args *StatefulStringArgs, opts ...pulumi.ResourceOption) (*StatefulString, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.String == nil {
		return nil, errors.New("invalid value for required argument 'String'")
	}
	if args.Triggers == nil {
		return nil, errors.New("invalid value for required argument 'Triggers'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StatefulString
	err := ctx.RegisterResource("statefulString:index:StatefulString", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStatefulString gets an existing StatefulString resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStatefulString(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StatefulStringState, opts ...pulumi.ResourceOption) (*StatefulString, error) {
	var resource StatefulString
	err := ctx.ReadResource("statefulString:index:StatefulString", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StatefulString resources.
type statefulStringState struct {
}

type StatefulStringState struct {
}

func (StatefulStringState) ElementType() reflect.Type {
	return reflect.TypeOf((*statefulStringState)(nil)).Elem()
}

type statefulStringArgs struct {
	String   string            `pulumi:"string"`
	Triggers map[string]string `pulumi:"triggers"`
}

// The set of arguments for constructing a StatefulString resource.
type StatefulStringArgs struct {
	String   pulumi.StringInput
	Triggers pulumi.StringMapInput
}

func (StatefulStringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*statefulStringArgs)(nil)).Elem()
}

type StatefulStringInput interface {
	pulumi.Input

	ToStatefulStringOutput() StatefulStringOutput
	ToStatefulStringOutputWithContext(ctx context.Context) StatefulStringOutput
}

func (*StatefulString) ElementType() reflect.Type {
	return reflect.TypeOf((**StatefulString)(nil)).Elem()
}

func (i *StatefulString) ToStatefulStringOutput() StatefulStringOutput {
	return i.ToStatefulStringOutputWithContext(context.Background())
}

func (i *StatefulString) ToStatefulStringOutputWithContext(ctx context.Context) StatefulStringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatefulStringOutput)
}

type StatefulStringOutput struct{ *pulumi.OutputState }

func (StatefulStringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StatefulString)(nil)).Elem()
}

func (o StatefulStringOutput) ToStatefulStringOutput() StatefulStringOutput {
	return o
}

func (o StatefulStringOutput) ToStatefulStringOutputWithContext(ctx context.Context) StatefulStringOutput {
	return o
}

func (o StatefulStringOutput) String() pulumi.StringOutput {
	return o.ApplyT(func(v *StatefulString) pulumi.StringOutput { return v.String }).(pulumi.StringOutput)
}

func (o StatefulStringOutput) Triggers() pulumi.StringMapOutput {
	return o.ApplyT(func(v *StatefulString) pulumi.StringMapOutput { return v.Triggers }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StatefulStringInput)(nil)).Elem(), &StatefulString{})
	pulumi.RegisterOutputType(StatefulStringOutput{})
}
